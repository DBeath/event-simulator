Simulation:
	Calendar calendar
	List<Entity> entity_list
	Dictionary<Queue> queue_dict
	Random rGen
	EventFactory event_factory
	
	public void Start()
	public void Stop()

Calendar:
	List<Event> event_list
	
	public void AddEvent()
	public void RemoveEvent()
	public void GetNextEvent()
	public void SortEvents()
	
Event:
	Entity this_entity
	Time event_time
	Simulation this_simulation
	
	public abstract void ProcessEvent(simulation)
	
	public void RemoveSelfFromCalendar()
		simulation.calendar.RemoveEvent(this)
	
CallArrive: Event:

	ProcessEvent(simulation)
		RemoveSelfFromCalendar()
		Create new CompleteIVR Event
		
CompleteIVR: Event:

	ProcessEvent(simulation)
		RemoveSelfFromCalendar()
		Put into correct Queue
		queue.UpdateQueue(this_entity)

CompleteServiceCarStereo: Event:

	ProcessEvent(simulation)
		RemoveSelfFromCalendar()
		stereoqueue.UpdateQueue(this_entity)

CompleteServiceOther: Event:

	ProcessEvent(simulation)
		RemoveSelfFromCalendar()
		otherqueue.UpdateQueue(this_entity)

EventManager:

EventFactory:
	Enum event_type
	
	public Event makeEvent()

Queue:
	Int product_type
	List<Entity> entity_list
	List<Server> server_list

	public void UpdateQueue(entity)
		foreach server in server_list
			if server contains entity
				server.RemoveCurrentEntity()
		
		foreach server in server_list
			if server is available
				server.AddEntity(entity_list.next)


Server:
	Int product_type
	Entity current_entity
	Bool available
	EventFactory event_factory
	
	public void RemoveCurrentEntity()
		current_entity.exit_time_system = now
		available = true
		
	public void AddEntity(entity)
		entity.exit_time_queue = now
		current_entity = entity
		event_factory.CreateEvent(CompleteService(product_type))

Entity:
	Int product_type
	Event current_event
	Time start_time_queue <- CompleteIVR
	Time exit_time_queue <- CompleteService
	Time start_time_system <- CallArrive
	Time exit_time_system <- Complete
	
EntityFactory:
	Enum product_type
	
	public Entity makeEntity()
	
Random:

Statistics:
	List<int> TimeInSystem
	List<int> TimeInQueue
	
Output:
	average system time
	average queue time
	average queue length
	# busy signals
	# complete stereo
	# complete other
	
	public void grabSystemStats()
	public void grabEntityStats()
	public void computeSummaries()
	public void display()

DatabaseManager:

ConfigManager:


