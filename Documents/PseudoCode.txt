Simulation:
	Calendar calendar
	List<Entity> entity_list
	Dictionary<Queue> queue_dict
	Random rGen
	EventFactory event_factory
	EntityFactory entity_factory
	public Time now
	
	public Simulation(product_types)
		entity_factory.CreateEntities(number_of_entities)
		foreach entity in entity_list
			event_factory.CreateEvent(CallArrive, entity)
			
	
	public void Start()
		while calendar.event_list is not empty
			calendar.RunEvent()
	
	public void AddEntityToQueue(entity)
		queue_dict.product_type_queue.AddEntity(entity)
		
	public void CompleteService(entity)
		queue_dict.product_type_queue.CompleteService(entity)
		
	

Calendar:
	List<Event> event_list
	
	public void AddEvent(event)
		if event_list does not contain event
			event_list.Add(event)
			
	public void RemoveEvent(event)
		if event_list contains event
			event_list.Remove(event)
	
	public void SortEvents()
		event_list.sort()
		
	public Void RunEvent()
		simulation.now = event_list.First(event.event_time)
		event_list.First(event.ProcessEvent())
	
Event:
	Entity entity
	Time event_time
	Simulation this_simulation
	
	public Event(simulation, entity, event_time)
	
	public abstract void ProcessEvent()
	
	public void RemoveSelfFromCalendar()
		simulation.calendar.RemoveEvent(this)
	
CallArrive: Event:

	ProcessEvent()
		RemoveSelfFromCalendar()
		entity.start_time_system = simulation.now
		event_factory.CreateEvent(completeIVR, entity)
		
CompleteIVR: Event:

	ProcessEvent()
		RemoveSelfFromCalendar()
		simulation.AddEntityToQueue(entity)
		entity.start_time_queue = simulation.now

CompleteService: Event:

	ProcessEvent()
		RemoveSelfFromCalendar()
		simulation.CompleteService(this_entity)

EventManager:

EventFactory:
	Enum event_type
	Simulation simulation
	Random rGen
	
	public Event CreateEvent(event_type, entity)
		switch(event_type)
			case CallArrive:
				event_time = rGen.CreateRandom(CallArriveRandomValue)
				simulation.calendar.AddEvent(
					new CallArrive(simulation, entity, event_time))
				
			case CompleteIVR:
				event_time = rGen.CreateRandom(CompleteIVRRandomValue)
				simulation.calendar.AddEvent(
					new CompleteIVR(simulation, entity, event_time))
				
			case CompleteService:
				event_time = rGen.CreateRandom(CompleteServiceRandomValue)
				simulation.calendar.AddEvent(
					new CompleteService(simulation, entity, event_time))

Queue:
	Int product_type
	Stack<Entity> entity_stack
	List<Server> server_list
	EventFactory event_factory

	public void CompleteService(entity)
		foreach server in server_list
			if server contains entity
				server.RemoveCurrentEntity()
		UpdateQueue()
			
	public void AddEntity(entity)
		entity_stack.push(entity)
		UpdateQueue()
		
	public void UpdateQueue()
		if entity_stack is not empty
			foreach server in server_list
				if server is available
					new_entity = entity_stack.pull
					server.AddEntity(new_entity)
					event_factory.CreateEvent(CompeteService, new_entity)

Server:
	Int product_type
	Entity current_entity
	Bool available
	
	public void RemoveCurrentEntity()
		current_entity.exit_time_system = now
		available = true
		
	public void AddEntity(entity)
		entity.exit_time_queue = now
		current_entity = entity
		

Entity:
	Int product_type
	Time start_time_queue <- CompleteIVR
	Time exit_time_queue <- CompleteService
	Time start_time_system <- CallArrive
	Time exit_time_system <- Complete

EntityFactory:
	Enum product_types
	Random rGen
	
	public List<Entity> CreateEntities(number_of_entities)
		entity_list = new List<Entity>
		for (number_of_entities)
			entity_list.Add(new Entity(various distribution metrics based on rGen here))
		
		return entity_list
	
Random:
	
	public int CreateRandom(event_type)
		"method to create random event_time based on event_type"
			
			
Statistics:
	List<int> TimeInSystem
	List<int> TimeInQueue
	
Output:
	average system time
	average queue time
	average queue length
	# busy signals
	# complete stereo
	# complete other
	
	public void grabSystemStats()
	public void grabEntityStats()
	public void computeSummaries()
	public void display()

DatabaseManager:

ConfigManager:


