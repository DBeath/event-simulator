Simulation:
	Calendar calendar
	List<Entity> entity_list
	Dictionary<Queue> queue_dict
	Random rGen
	EventFactory event_factory
	Time now
	
	
	public void Start()
	public void Stop()

Calendar:
	List<Event> event_list
	
	public void AddEvent()
	public void RemoveEvent()
	public void GetNextEvent()
	public void SortEvents()
	
Event:
	Entity entity
	Time event_time
	Simulation this_simulation
	
	public abstract void ProcessEvent()
	
	public void RemoveSelfFromCalendar()
		simulation.calendar.RemoveEvent(this)
	
CallArrive: Event:

	ProcessEvent()
		RemoveSelfFromCalendar()
		entity.start_time_system = simulation.now
		event_factory.CreateEvent(completeIVR, entity)
		
CompleteIVR: Event:

	ProcessEvent()
		RemoveSelfFromCalendar()
		simulation.AddEntityToQueue(entity)
		entity.start_time_queue = simulation.now

CompleteService: Event:
	int product_type
	
	public CompleteService(): base Event(simulation, entity)
		product_type = entity.product_type

	ProcessEvent()
		RemoveSelfFromCalendar()
		queue.CompleteService(this_entity)

EventManager:

EventFactory:
	Enum event_type
	Simulation simulation
	
	public Event CreateEvent(event_type, entity)
		switch(event_type)
			case CallArrive:
				new CallArrive(simulation, entity)
				
			case CompleteIVR:
				new CompleteIVR(simulation, entity)
				
			case CompleteService:
				new CompleteService(simulation, entity)

Queue:
	Int product_type
	Stack<Entity> entity_stack
	List<Server> server_list
	EntityFactory entity_factory

	public void CompleteService(entity)
		foreach server in server_list
			if server contains entity
				server.RemoveCurrentEntity()
		UpdateQueue()
			
	public void AddEntity(entity)
		entity_stack.push(entity)
		UpdateQueue()
		
	public void UpdateQueue()
		if entity_stack is not empty
			foreach server in server_list
				if server is available
					new_entity = entity_stack.pull
					server.AddEntity(new_entity)
					entity_factory.CreateEvent(CompeteService, new_entity)

Server:
	Int product_type
	Entity current_entity
	Bool available
	
	public void RemoveCurrentEntity()
		current_entity.exit_time_ = now
		available = true
		
	public void AddEntity(entity)
		entity.exit_time_queue = now
		current_entity = entity
		

Entity:
	Int product_type
	Event current_event
	Time start_time_queue <- CompleteIVR
	Time exit_time_queue <- CompleteService
	Time start_time_system <- CallArrive
	Time exit_time_system <- Complete
	
EntityFactory:
	Enum product_type
	
	public Entity makeEntity()
	
Random:

Statistics:
	List<int> TimeInSystem
	List<int> TimeInQueue
	
Output:
	average system time
	average queue time
	average queue length
	# busy signals
	# complete stereo
	# complete other
	
	public void grabSystemStats()
	public void grabEntityStats()
	public void computeSummaries()
	public void display()

DatabaseManager:

ConfigManager:


